" All system-wide defaults are set in $VIMRUNTIME/archlinux.vim (usually just
" /usr/share/vim/vimfiles/archlinux.vim) and sourced by the call to :runtime
" you can find below.  If you wish to change any of those settings, you should
" do it in this file (/etc/vimrc), since archlinux.vim will be overwritten
" everytime an upgrade of the vim packages is performed.  It is recommended to
" make changes after sourcing archlinux.vim since it alters the value of the
" 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages.
runtime! archlinux.vim

" If you prefer the old-style vim functionalty, add 'runtime! vimrc_example.vim'
" Or better yet, read /usr/share/vim/vim80/vimrc_example.vim or the vim manual
" and configure vim to your own liking!

" do not load defaults if ~/.vimrc is missing
"let skip_defaults_vim=1


" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

"EDITS

" Force to use underline for spell check results
augroup SpellUnderline
  autocmd!
  autocmd ColorScheme *
    \ highlight SpellBad
    \   cterm=Underline
    \   ctermfg=darkred
    \   ctermbg=NONE
    \   term=Reverse
    \   gui=Undercurl
    \   guisp=Red
  autocmd ColorScheme *
    \ highlight SpellCap
    \   cterm=Underline
    \   ctermfg=NONE
    \   ctermbg=NONE
    \   term=Reverse
    \   gui=Undercurl
    \   guisp=Red
  autocmd ColorScheme *
    \ highlight SpellLocal
    \   cterm=Underline
    \   ctermfg=NONE
    \   ctermbg=NONE
    \   term=Reverse
    \   gui=Undercurl
    \   guisp=Red
  autocmd ColorScheme *
    \ highlight SpellRare
    \   cterm=Underline
    \   ctermfg=NONE
    \   ctermbg=NONE
    \   term=Reverse
    \   gui=Undercurl
    \   guisp=Red
  augroup END


set termguicolors
" colorscheme base16-tomorrow-night
colorscheme hybrid
set background=dark
set encoding=utf8
set number
set tabstop=2
set shiftwidth=2
set expandtab
set autoindent
set smartindent
filetype plugin indent on
autocmd  BufRead,BufNewFile  *.cpp let &makeprg = 'if [ -f Makefile ]; then make Release && make RunRelease; else make Release -C .. && make RunRelease -C ..; fi'
set mouse=a
set ttyfast

"CURSOR
if has("autocmd")
    au InsertEnter * silent execute "!sed -i.bak -e 's/TERMINAL_CURSOR_SHAPE_BLOCK/TERMINAL_CURSOR_SHAPE_IBEAM/' ~/.config/xfce4/terminal/terminalrc"                                                                                          
    au InsertLeave * silent execute "!sed -i.bak -e 's/TERMINAL_CURSOR_SHAPE_IBEAM/TERMINAL_CURSOR_SHAPE_BLOCK/' ~/.config/xfce4/terminal/terminalrc"                                                                                          
    au VimLeave * silent execute "!sed -i.bak -e 's/TERMINAL_CURSOR_SHAPE_IBEAM/TERMINAL_CURSOR_SHAPE_BLOCK/' ~/.config/xfce4/terminal/terminalrc"  
endif

"WRITING
augroup markdown
    autocmd!
    autocmd Filetype markdown,mkd call SetUpMk()
augroup END

function! SetUpMk()
    "colorscheme slate
    set spell
    call litecorrect#init()
    Pencil
endfunction

autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

"KEYBINDS
let mapleader = ","
map <f9> :MakeJob
inoremap jk <esc>
inoremap kj <esc>

"termDebug split
autocmd filetype cpp nnoremap <F6> :Termdebug %:r<CR><c-w>2j<c-w>H

"nerdTREE
map <C-N> :NERDTreeToggle<CR>
let NERDTreeQuitOnOpen = 1

"FZF
" Search and switch buffers
nmap <leader>b :Buffers<cr>
" " Find files by name under the current directory
nmap <leader>f :Files<cr>
" Find files by name under the home directory
 nmap <leader>h :Files ~/<cr>

" MARKDOWN FOLD
nnoremap <Space> za
"set nocompatible
"if has("autocmd")
"    filetype plugin indent on
"endif

"MARKDOWN PREVIEW
let g:md_pdf_viewer="zathura"


" COPY/PASTE
"noremap <Leader>y "*y
"noremap <Leader>p "*p
noremap <Leader>y "+y
noremap <Leader>p "+p

command! -range=% SoftWrap
            \ <line1>put _ |
            \ <line0>,<line2>g/.\+/ .;-/^$/ join |normal $x
" noremap <Leader>y "*y
" noremap <Leader>p "*p
" noremap <Leader>Y "+y
" noremap <Leader>P "+p

" AUTOCOMPLETE
set omnifunc=syntaxcomplete#Complete
set iskeyword+=-

" COC-NVIM
" use <tab> for trigger completion and navigate to the next complete item
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()

" """""
" inoremap <silent><expr> <TAB>
"       \ pumvisible() ? coc#_select_confirm() :
"       \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
"       \ <SID>check_back_space() ? "\<TAB>" :
"       \ coc#refresh()

" function! s:check_back_space() abort
"   let col = col('.') - 1
"   return !col || getline('.')[col - 1]  =~# '\s'
" endfunction

" let g:coc_snippet_next = '<tab>'

" " Use <C-l> for trigger snippet expand.
" imap <C-l> <Plug>(coc-snippets-expand)

" " Use <C-j> for select text for visual placeholder of snippet.
" vmap <C-j> <Plug>(coc-snippets-select)

" " Use <C-j> for jump to next placeholder, it's default of coc.nvim
" let g:coc_snippet_next = '<c-j>'

" " Use <C-k> for jump to previous placeholder, it's default of coc.nvim
" let g:coc_snippet_prev = '<c-k>'

" " Use <C-j> for both expand and jump (make expand higher priority.)
" imap <C-j> <Plug>(coc-snippets-expand-jump)

"STATUSBAR
"curren mode
let g:currentmode={
    \ 'n'  : 'Normal',
    \ 'no' : 'Normal·Operator Pending',
    \ 'v'  : 'Visual',
    \ 'V'  : 'V·Line',
    \ '^V' : 'V·Block',
    \ 's'  : 'Select',
    \ 'S'  : 'S·Line',
    \ '^S' : 'S·Block',
    \ 'i'  : 'Insert',
    \ 'R'  : 'Replace',
    \ 'Rv' : 'V·Replace',
    \ 'c'  : 'Command',
    \ 'cv' : 'Vim Ex',
    \ 'ce' : 'Ex',
    \ 'r'  : 'Prompt',
    \ 'rm' : 'More',
    \ 'r?' : 'Confirm',
    \ '!'  : 'Shell',
    \ 't'  : 'Terminal'
    \}


set laststatus=2
set statusline=
set statusline+=%0*\ %n\                                 " Buffer number
set statusline+=%3*│                                     " Separator
set statusline+=%0*\ %{toupper(g:currentmode[mode()])}\  " The current mode
set statusline+=%3*                                     " Separator
set statusline+=\ %f                                     " Show file path
set statusline+=\ (%{&ff})                                 " FileFormat (dos/unix..)

set statusline+=%=                                       " Right Side
set statusline+=%2*\ %02v\                           " Colomn number
set statusline+=%3*│                                     " Separator
set statusline+=%1*\ %02l/%L\%3p%%\                  " Line number / total lines, percentage of document
set statusline+=%3*│                                     " Separator
"set statusline+=%2*\ %{''.(&fenc!=''?&fenc:&enc).''}    " Encoding
set statusline+=%2*\ %Y\                                 " FileType
set statusline+=%r                                       "read only flag
set statusline+=%m                                       "modified flag


"hi User1 ctermbg=007 ctermfg=red   guibg=#4e4e4e guifg=red
"hi User2 ctermbg=red   ctermfg=blue  guibg=red   guifg=blue
"hi User3 ctermbg=blue  ctermfg=green guibg=blue  guifg=green
"
