{
	"createA": {
		"body": [
			"createA(${1:href}, ${2:html}, ${3:[target]})"
		],
		"description": "Creates an  element in the DOM for including a hyperlink. Appends to the container node if one is specified, otherwise appends to body.",
		"prefix": "createA"
	},
	"createAudio": {
		"body": [
			"createAudio(${1:src}, ${2:[callback]})"
		],
		"description": "Creates a hidden HTML5  element in the DOM for simple audio playback. Appends to the container node if one is specified, otherwise appends to body. The first parameter can be either a single string path to a audio file, or an array of string paths to different formats of the same audio. This is useful for ensuring that your audio can play across different browsers, as each supports different formats. See this page for further information about supported formats.",
		"prefix": "createAudio"
	},
	"createButton": {
		"body": [
			"createButton(${1:label}, ${2:[value]})"
		],
		"description": "Creates a  element in the DOM. Use .size() to set the display size of the button. Use .mousePressed() to specify behavior on press. Appends to the container node if one is specified, otherwise appends to body.",
		"prefix": "createButton"
	},
	"createCapture": {
		"body": [
			"createCapture(${1:type}, ${2:callback})"
		],
		"description": "Creates a new  element that contains the audio/video feed from a webcam. This can be drawn onto the canvas using video(). More specific properties of the feed can be passing in a Constraints object. See the  W3C spec for possible properties. Note that not all of these are supported by all browsers. Security note: A new browser security specification requires that getUserMedia, which is behind createCapture(), only works when you're running the code locally, or on HTTPS. Learn more here and here.",
		"prefix": "createCapture"
	},
	"createCheckbox": {
		"body": [
			"createCheckbox(${1:[label]}, ${2:[value]})"
		],
		"description": "Creates a checkbox  element in the DOM. Calling .checked() on a checkbox returns if it is checked or not",
		"prefix": "createCheckbox"
	},
	"createDiv": {
		"body": [
			"createDiv(${1:html})"
		],
		"description": "Creates a  element in the DOM with given inner HTML. Appends to the container node if one is specified, otherwise appends to body.",
		"prefix": "createDiv"
	},
	"createElement": {
		"body": [
			"createElement(${1:tag}, ${2:[content]})"
		],
		"description": "Creates element with given tag in the DOM with given content. Appends to the container node if one is specified, otherwise appends to body.",
		"prefix": "createElement"
	},
	"createFileInput": {
		"body": [
			"createFileInput(${1:[callback]}, ${2:[multiple]})"
		],
		"description": "Creates an  element in the DOM of type 'file'. This allows users to select local files for use in a sketch.",
		"prefix": "createFileInput"
	},
	"createImg": {
		"body": [
			"createImg(${1:src}, ${2:[alt]}, ${3:[successCallback]})"
		],
		"description": "Creates an  element in the DOM with given src and alternate text. Appends to the container node if one is specified, otherwise appends to body.",
		"prefix": "createImg"
	},
	"createInput": {
		"body": [
			"createInput(${1:[value]}, ${2:[type]})"
		],
		"description": "Creates an  element in the DOM for text input. Use .size() to set the display length of the box. Appends to the container node if one is specified, otherwise appends to body.",
		"prefix": "createInput"
	},
	"createP": {
		"body": [
			"createP(${1:html})"
		],
		"description": "Creates a  element in the DOM with given inner HTML. Used for paragraph length text. Appends to the container node if one is specified, otherwise appends to body.",
		"prefix": "createP"
	},
	"createRadio": {
		"body": [
			"createRadio(${1:[divId]})"
		],
		"description": "Creates a radio button  element in the DOM. The .option() method can be used to set options for the radio after it is created. The .value() method will return the currently selected option.",
		"prefix": "createRadio"
	},
	"createSelect": {
		"body": [
			"createSelect(${1:[multiple] [true if dropdown should support multiple selections]})"
		],
		"description": "Creates a dropdown menu  element in the DOM.",
		"prefix": "createSelect"
	},
	"createSlider": {
		"body": [
			"createSlider(${1:min}, ${2:max}, ${3:[value]}, ${4:[step]})"
		],
		"description": "Creates a slider  element in the DOM. Use .size() to set the display length of the slider. Appends to the container node if one is specified, otherwise appends to body.",
		"prefix": "createSlider"
	},
	"createSpan": {
		"body": [
			"createSpan(${1:html})"
		],
		"description": "Creates a  element in the DOM with given inner HTML. Appends to the container node if one is specified, otherwise appends to body.",
		"prefix": "createSpan"
	},
	"createVideo": {
		"body": [
			"createVideo(${1:src}, ${2:[callback]})"
		],
		"description": "Creates an HTML5  element in the DOM for simple playback of audio/video. Shown by default, can be hidden with .hide() and drawn into canvas using video(). Appends to the container node if one is specified, otherwise appends to body. The first parameter can be either a single string path to a video file, or an array of string paths to different formats of the same video. This is useful for ensuring that your video can play across different browsers, as each supports different formats. See this page for further information about supported formats.",
		"prefix": "createVideo"
	},
	"removeElements": {
		"body": [
			"removeElements()"
		],
		"description": "Removes all elements created by p5, except any canvas / graphics elements created by createCanvas or createGraphics. Event handlers are removed, and element is removed from the DOM.",
		"prefix": "removeElements"
	},
	"select": {
		"body": [
			"select(${1:name}, ${2:[container]})"
		],
		"description": "Searches the page for an element with the given ID, class, or tag name (using the '#' or '.' prefixes to specify an ID or class respectively, and none for a tag) and returns it as a p5.Element. If a class or tag name is given with more than 1 element, only the first element will be returned. The DOM node itself can be accessed with .elt. Returns null if none found. You can also specify a container to search within.",
		"prefix": "select"
	},
	"selectAll": {
		"body": [
			"selectAll(${1:name}, ${2:[container]})"
		],
		"description": "Searches the page for elements with the given class or tag name (using the '.' prefix to specify a class and no prefix for a tag) and returns them as p5.Elements in an array. The DOM node itself can be accessed with .elt. Returns an empty array if none found. You can also specify a container to search within.",
		"prefix": "selectAll"
	}
}